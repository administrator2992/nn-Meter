from nn_meter.predictor.transformer_predictor import BlockLatencyPredictor

sample1 = (
    224, # 0 input res
    (16, 24, 40, 64, 112, 192, 320), # 1 channels
    (1, 3, 4, 2, 3, 4, 5), # 2 depths
    (1, 5, 5, 5, 6, 6, 6, 6), # 3 conv expansion ratio
    (3, 5, 5, 5, 5, 5, 5, 5), # 4 conv kr size
    (4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3), # 5 trans mlp ratio
    (4, 4, 7, 7, 7, 12, 12, 12, 12, 20, 20, 20, 20, 20), # 6 trans num heads
    (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1), # 7 windows size
    (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1), # 8 qk scale
    (2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4) # 9 v scale
)

sample2 = [
    160, 
    (24, 24, 40, 48, 64, 160, 320), 
    (1, 2, 3, 1, 6, 3, 1), 
    (1, 2, 2, 4, 4, 4), 
    (3, 3, 3, 3, 3, 3), 
    (4, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1), 
    (3, 4, 4, 4, 4, 4, 4, 10, 10, 10, 20), 
    (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1), 
    (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1), 
    (2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 4)
]


NASVIT_A0 = (
    192, # res
    (16, 16, 24, 32, 64, 112, 160, 208, 1984), # channels, 
    (1, 3, 3, 2, 2, 2, 2), # depths, 
    (1, 4, 4, 4, 4, 4, 4), # conv_ratio, 
    (3, 3, 3, 3, 3, 3, 3), # kr_size, 
    (1, 1, 1, 1, 1, 1, 1, 1), # mlp_ratio, 
    (8, 8, 14, 14, 20, 20, 26, 26), # num_heads, 
    (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1), # window_size, 
    (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1), # qk_scale, 
    (4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4) # v_scale
)

# our hybrid transformer results 11.18.2022
# 200M
arch_200 = (192, (16, 24, 32, 48, 128, 192, 304), (1, 3, 3, 2, 2, 2, 3), (1, 3, 3, 3, 5, 5, 5), (3, 3, 3, 3, 3, 3, 3), (4, 4, 3, 3, 4, 4, 4, 4, 4), (3, 3, 8, 8, 12, 12, 19, 19, 19), (1, 1, 1, 1, 1, 1, 1, 1, 1), (1, 1, 1, 1, 1, 1, 1, 1, 1), (3, 3, 2, 2, 2, 2, 2, 2, 2))

# 300M
arch_300 = (224, (16, 24, 32, 48, 112, 192, 272), (1, 3, 4, 2, 3, 2, 3), (1, 3, 3, 3, 5, 5, 5, 5), (3, 3, 3, 3, 3, 3, 3, 3), (3, 3, 3, 3, 3, 4, 4, 4, 4, 4), (3, 3, 7, 7, 7, 12, 12, 17, 17, 17), (1, 1, 1, 1, 1, 1, 1, 1, 1, 1), (1, 1, 1, 1, 1, 1, 1, 1, 1, 1), (3, 3, 2, 2, 2, 2, 2, 3, 3, 3))

# 400M
arch_400 = (256, (16, 24, 32, 48, 96, 192, 272), (1, 3, 5, 2, 3, 2, 3), (1, 3, 3, 3, 5, 5, 5, 5, 5), (3, 3, 3, 3, 5, 5, 5, 5, 5), (3, 3, 4, 4, 4, 4, 4, 4, 4, 4), (3, 3, 6, 6, 6, 12, 12, 17, 17, 17), (1, 1, 1, 1, 1, 1, 1, 1, 1, 1), (1, 1, 1, 1, 1, 1, 1, 1, 1, 1), (3, 3, 3, 3, 3, 2, 2, 2, 2, 2))

# 500M
arch_500 = (256, (16, 24, 32, 80, 128, 192, 320), (1, 3, 4, 2, 2, 2, 3), (1, 3, 3, 3, 6, 6, 6, 6), (3, 5, 5, 5, 3, 3, 3, 3), (3, 3, 4, 4, 4, 4, 3, 3, 3), (5, 5, 8, 8, 12, 12, 20, 20, 20), (1, 1, 1, 1, 1, 1, 1, 1, 1), (1, 1, 1, 1, 1, 1, 1, 1, 1), (3, 3, 4, 4, 2, 2, 3, 3, 3))

# 600M
arch_600 = (256, (16, 24, 32, 80, 144, 256, 288), (1, 3, 4, 2, 3, 2, 3), (1, 5, 5, 5, 6, 6, 6, 6), (3, 3, 3, 3, 5, 5, 5, 5), (3, 3, 3, 3, 3, 4, 4, 4, 4, 4), (5, 5, 9, 9, 9, 16, 16, 18, 18, 18), (1, 1, 1, 1, 1, 1, 1, 1, 1, 1), (1, 1, 1, 1, 1, 1, 1, 1, 1, 1), (3, 3, 3, 3, 3, 2, 2, 2, 2, 2))

# 700M
arch_700 = (256, (16, 24, 40, 96, 160, 224, 304), (1, 3, 4, 2, 3, 3, 3), (1, 6, 6, 6, 6, 6, 6, 6), (3, 3, 3, 3, 5, 5, 5, 5), (2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4), (6, 6, 10, 10, 10, 14, 14, 14, 19, 19, 19), (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1), (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1), (3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2))

# 800M
arch_800 = (256, (16, 24, 40, 96, 160, 240, 304), (1, 3, 5, 2, 5, 3, 3), (1, 6, 6, 6, 5, 5, 5, 5, 5), (3, 3, 3, 3, 5, 5, 5, 5, 5), (2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4), (6, 6, 10, 10, 10, 10, 10, 15, 15, 15, 19, 19, 19), (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1), (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1), (3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4))


# nasvit search results 11.18.2022
arch_nasvit_240 = (192,
 (16, 16, 24, 32, 64, 120, 160, 208, 1792),
 (1, 3, 3, 2, 2, 5, 2),
 (1, 4, 4, 4, 4, 4, 4),
 (3, 3, 3, 3, 3, 3, 3),
 (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
 (8, 8, 15, 15, 20, 20, 20, 20, 20, 26, 26),
 None,
 None,
 (4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4))

arch_nasvit_300 = (192,
 (24, 16, 24, 40, 64, 120, 176, 208, 1792),
 (1, 3, 5, 2, 3, 5, 3),
 (1, 4, 4, 4, 5, 5, 5, 5, 5),
 (3, 3, 3, 3, 3, 3, 3, 3, 3),
 (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
 (8, 8, 15, 15, 15, 22, 22, 22, 22, 22, 26, 26, 26),
 None,
 None,
 (4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4))

arch_nasvit_350 = (224,
 (24, 16, 24, 40, 64, 112, 184, 208, 1792),
 (1, 3, 5, 2, 2, 2, 3),
 (1, 4, 4, 4, 4, 4, 4, 4, 4),
 (3, 3, 3, 3, 3, 3, 3, 3, 3),
 (1, 1, 1, 1, 1, 1, 1, 1, 1),
 (8, 8, 14, 14, 23, 23, 26, 26, 26),
 None,
 None,
 (4, 4, 4, 4, 4, 4, 4, 4, 4))

arch_nasvit_420 = (224,
 (24, 16, 24, 40, 64, 112, 184, 208, 1792),
 (1, 3, 4, 2, 2, 5, 2),
 (1, 4, 4, 4, 4, 4, 4, 4),
 (3, 3, 3, 3, 3, 3, 3, 3),
 (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
 (8, 8, 14, 14, 23, 23, 23, 23, 23, 26, 26),
 None,
 None,
 (4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4))

arch_nasvit_470 = (224,
 (24, 16, 24, 40, 64, 120, 184, 216, 1792),
 (1, 3, 5, 2, 5, 5, 2),
 (1, 4, 4, 4, 4, 4, 4, 4, 4),
 (3, 3, 3, 3, 3, 3, 3, 3, 3),
 (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
 (8, 8, 15, 15, 15, 15, 15, 23, 23, 23, 23, 23, 27, 27),
 None,
 None,
 (4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4))

arch_nasvit_540 = (224,
 (16, 16, 24, 40, 64, 120, 184, 208, 1984),
 (1, 4, 5, 2, 5, 6, 5),
 (1, 4, 4, 4, 4, 4, 4, 4, 4, 4),
 (3, 3, 3, 3, 3, 3, 3, 3, 3, 3),
 (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
 (8, 8, 15, 15, 15, 15, 15, 23, 23, 23, 23, 23, 23, 26, 26, 26, 26, 26),
 None,
 None,
 (4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4))


for arch in [arch_200, arch_300, arch_400, arch_500, arch_600, arch_700, arch_800]:
    print()
    predictor = BlockLatencyPredictor("pixel6_lut", mode="layerwise")
    print("layerwise lut", predictor.get_latency(arch))

    predictor = BlockLatencyPredictor("pixel6_lut", mode="blockwise")
    print("blockwise lut", predictor.get_latency(arch))


for arch in [arch_nasvit_240, arch_nasvit_300, arch_nasvit_350, arch_nasvit_420, arch_nasvit_470, arch_nasvit_540]:
    print()
    predictor = BlockLatencyPredictor("pixel6_lut", mode="layerwise")
    print("layerwise lut", predictor.get_nasvit_latency(arch))

    predictor = BlockLatencyPredictor("pixel6_lut", mode="blockwise")
    print("blockwise lut", predictor.get_nasvit_latency(arch))